//–º–æ–∫–æ–≤—ã –¥–∞–Ω–Ω—ã–µ - –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const MOCK_TASKS = [
    { id: 1, title: "–ò–∑—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω MVC", isDone: false },
    { id: 2, title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", isDone: true },
];

// —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
const model = {
    tasks: [], //—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –º–∞—Å—Å–∏–≤
    addTask(title) {
        //–¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const newTask = { title: title, isDone: false, id: Math.random() };
        // const newTask = { title, isDone, id };
        // —Ç–æ –∂–µ, —á—Ç–æ { title: title, isDone: isDone, id: id }
        this.tasks.push(newTask);

        view.renderTasks(this.tasks); //–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        view.renderCount(this.tasks);
    },
    deleteTask(taskId) {
        //—É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        this.tasks = this.tasks.filter((task) => task.id !== taskId);

        console.log(this.tasks);
        view.renderTasks(this.tasks);
        view.renderCount(this.tasks);
    },
    toggleTask(taskId) {
        //–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–∂–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        // –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è –º–µ—Ç–æ–¥–æ–º map
        this.tasks = this.tasks.map((task) => {
            if (task.id === taskId) {
                task.isDone = !task.isDone;
            }
            return task;
        });
        view.renderCount(this.tasks);

        view.renderTasks(model.tasks); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    },
    resetTask() {
        this.tasks = this.tasks.filter((task) => !task.isDone);
        view.renderTasks(model.tasks);
        view.renderCount(this.tasks);
    },
};

// –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
const view = {
    init() {
        this.renderTasks(model.tasks);
        const form = document.querySelector(".form");
        const input = document.querySelector(".input");

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ñ–æ—Ä–º—É
        form.addEventListener("submit", function (event) {
            event.preventDefault(); //–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            // const title = document.querySelector(".input").value;

            // const title = input.value;
            // controller.addTask(title); //–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ addTask –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
            controller.addTask(input.value); //–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ addTask –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞

            input.value = ""; //–æ—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞
        });

        const list = document.querySelector(".list");
        list.addEventListener("click", function (event) {
            // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            if (event.target.classList.contains("task-title")) {
                // id –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ id —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                // +, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∞—Ä–Ω—ã–π –ø–ª—é—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –≤ number
                const taskId = +event.target.parentElement.id;
                controller.toggeleTask(taskId);
            }
            if (event.target.classList.contains("delete-button")) {
                const taskId = +event.target.parentElement.id;
                //–≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                controller.deleteTask(taskId);
            }
        });
        const reset = document.querySelector(".reset");
        reset.addEventListener("click", function (event) {
            controller.resetTask();
        });
    },
    renderTasks(tasks) {
        //–ª–æ–≤–∏–º —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, –ø–∞—Ä–∞–º–µ—Ç—Ä tasks - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–∞—à–∏—Ö –∑–∞–∞–¥—á
        const list = document.querySelector(".list"); //–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ ul –ø–æ –∫–ª–∞—Å—Å—É, —á—Ç–æ–±—ã –≤ –ø–æ—Å–ª–µ–¥—É–µ—à—â–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏
        let tasksHTML = ""; //—Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –±—É–¥–µ–º –ø—É—à–∏—Ç—å –∑–∞–¥–∞—á—É
        for (let i = 0; i < tasks.length; i++) {
            const task = tasks[i];
            tasksHTML =
                tasksHTML +
                `
        <li id="${task.id}" class="${task.isDone ? "done" : ""}">
        <b class="task-title">${task.title}</b>
        <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
        </li>
    `;
            //             `
            // <li>
            // <span>${task.title}</span>
            // <button>–£–¥–∞–ª–∏—Ç—å</button>
            // </li>
            // `;
        }
        list.innerHTML = tasksHTML; //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—à–µ–π li –≤ list
    },
    renderCount(tasks) {
        let newTasks = tasks.filter((task) => !task.isDone);

        const count = document.querySelector(".count");
        count.textContent = newTasks.length;
    },
};

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
const controller = {
    addTask(title) {
        if (title.trim() !== "") {
            //–¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            model.addTask(title);
        }
    }, //–¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    deleteTask(id) {
        model.deleteTask(id);
    }, //—É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    toggeleTask(id) {
        model.toggleTask(id);
    }, //–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–∂–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    resetTask() {
        model.resetTask();
    }, //–æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
};

function viewDefault() {
    view.init();
}
viewDefault();
